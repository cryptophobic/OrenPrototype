from typing import Protocol, TypeVar, Callable, Iterator, Generic, runtime_checkable, Self

K = TypeVar("K")  # Key type
V = TypeVar("V")  # Value type
T = TypeVar("T")

@runtime_checkable
class CollectionBaseProtocol(Protocol[K, V]):
    def __iter__(self) -> Iterator[V]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: K) -> bool: ...
    def get(self, key: K) -> V | None: ...
    def remove(self, key: K) -> bool: ...
    def raw_items(self) -> dict[K, V]: ...
    def filter(self, predicate: Callable[[V], bool]) -> Self: ...
    def subtract(self, other: Self) -> Self: ...
