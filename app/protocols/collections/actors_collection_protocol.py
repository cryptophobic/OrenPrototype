from typing import Protocol, Type, TypeVar, Iterator, Callable, runtime_checkable, Self
from app.protocols.objects.actor_protocol import ActorProtocol

V = TypeVar("V", bound=ActorProtocol)
T = TypeVar("T", bound=ActorProtocol)

@runtime_checkable
class ActorsCollectionProtocol(Protocol[V]):
    def __iter__(self) -> Iterator[V]: ...
    def __len__(self) -> int: ...
    def __contains__(self, name: str) -> bool: ...
    def get(self, key: str) -> V | None: ...
    def add(self, actor: V) -> None: ...
    def clean(self) -> None: ...
    def get_active_actors(self) -> Self: ...
    def get_deleted_actors(self) -> Self: ...
    def filter(self, predicate: Callable[[V], bool]) -> Self: ...
    def get_by_type(self, cls: Type[T], collection_type: Type[Self] = ...) -> Self: ...
