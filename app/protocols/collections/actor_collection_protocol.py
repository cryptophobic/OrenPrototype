from typing import Protocol, Type, TypeVar, Iterator, Callable, runtime_checkable, Self

from app.config import Behaviours
from app.protocols.core.collection_base_protocol import CollectionBaseProtocol
from app.protocols.objects.actor_protocol import ActorProtocol

V = TypeVar("V", bound=ActorProtocol)
T = TypeVar("T", bound=ActorProtocol)
C = TypeVar("C", bound="ActorCollection")


@runtime_checkable
class ActorCollectionProtocol(CollectionBaseProtocol[str, V], Protocol[V]):
    def __iter__(self) -> Iterator[V]: ...
    def __len__(self) -> int: ...
    def __contains__(self, name: str) -> bool: ...
    def get(self, key: str) -> V | None: ...
    def add(self, actor: V) -> None: ...
    def clean(self) -> None: ...
    def get_active_actors(self) -> Self: ...
    def get_pending_actors(self) -> Self: ...
    def get_deleted_actors(self) -> Self: ...
    def get_behave_as_this(self, behaviour: Behaviours, first = False) -> Self | V: ...
    def get_behave_as_them(self, behaviours: list[Behaviours], first = False) -> Self | V: ...
    def get_behave_as_any(self, behaviours: list[Behaviours], first = False) -> Self | V: ...
    def filter(self, predicate: Callable[[V], bool]) -> Self: ...
    def get_by_type(self, cls: Type[T], collection_type: Type[C] = ...) -> C: ...
